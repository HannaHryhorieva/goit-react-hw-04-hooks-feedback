{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","shortid","generate","Section","title","children","Notification","message","App","useState","goodOption","setGoodOption","neutralOption","setNeutralOption","badOption","setBadOption","countTotalFeedback","e","preventDefault","target","state","totalFeedback","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QACe,SAASA,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,qBAAKC,UAAU,aAAf,SACE,+BACE,yCAAYL,KACZ,4CAAeC,KACf,wCAAWC,KACX,0CAAaC,KACb,uDAA0BC,EAA1B,Y,oBCZO,SAASE,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACE,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAEEC,KAAK,SACLN,UAAU,gBACVO,KAAMF,EACNG,QAASL,EALX,SAOGE,GANII,IAAQC,iBCPvB,IAUeC,EAVC,SAAC,GAAD,QAAGC,aAAH,MAAW,GAAX,EAAeC,EAAf,EAAeA,SAAf,OACd,sBAAKb,UAAU,YAAf,UACE,6BAAKY,IACJC,MCCUC,EAJM,SAAC,GAAD,QAAGC,eAAH,MAAa,GAAb,SAAsB,4BAAIA,KCMhC,SAASC,IACtB,MAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0CF,mBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAkCJ,mBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAEMC,EAAqB,WACzB,OAAON,EAAaE,EAAgBE,GA8BtC,OACE,gCACE,cAAC,EAAD,CAASV,MAAM,wBAAf,SACE,cAACX,EAAD,CACEC,QALW,CAAC,OAAQ,UAAW,OAM/BC,gBAxBe,SAAAsB,GAGrB,OAFAA,EAAEC,iBACYD,EAAEE,OAAOpB,MAErB,IAAK,OACHY,GAAc,SAAAS,GAAK,OAAIA,EAAQ,KAC/B,MACF,IAAK,UACHP,GAAiB,SAAAO,GAAK,OAAIA,EAAQ,KAClC,MACF,IAAK,MACHL,GAAa,SAAAK,GAAK,OAAIA,EAAQ,WAgBhC,cAAC,EAAD,CAAShB,MAAM,aAAf,SAC4B,IAAzBY,IACC,cAAC,EAAD,CAAcT,QAAQ,sBAEtB,cAACrB,EAAD,CACEC,KAAMuB,EACNtB,QAASwB,EACTvB,IAAKyB,EACLxB,MAAO0B,IACPzB,mBA5C8B,WACtC,IAAM8B,EAAgBL,IACtB,OAAsB,IAAlBK,EACK,EAEFC,KAAKC,OAAQb,EAAaE,GAAiBS,EAAiB,KAuCvCG,UCvDhCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b02e2058.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <div className=\"Statistics\">\n      <ul>\n        <li>good : {good}</li>\n        <li>neutral : {neutral}</li>\n        <li>bad : {bad}</li>\n        <li>total : {total}</li>\n        <li>positivePercentage : {positivePercentage}%</li>\n      </ul>\n    </div>\n  );\n}\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n","import PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div>\n      {options.map(option => (\n        <button\n          key={shortid.generate()}\n          type=\"button\"\n          className=\"TodoList__btn\"\n          name={option}\n          onClick={onLeaveFeedback}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n}\nFeedbackOptions.propTypes = {\n  options: PropTypes.array,\n  onLeaveFeedback: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nconst Section = ({ title = '', children }) => (\n  <div className=\"Container\">\n    <h3>{title}</h3>\n    {children}\n  </div>\n);\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.element,\n};\nexport default Section;\n","import PropTypes from 'prop-types';\nconst Notification = ({ message = '' }) => <p>{message}</p>;\nNotification.propTypes = {\n  message: PropTypes.string,\n};\nexport default Notification;\n","import { useState } from 'react';\nimport './App.css';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\nexport default function App() {\n  const [goodOption, setGoodOption] = useState(0);\n  const [neutralOption, setNeutralOption] = useState(0);\n  const [badOption, setBadOption] = useState(0);\n\n  const countTotalFeedback = () => {\n    return goodOption + neutralOption + badOption;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const totalFeedback = countTotalFeedback();\n    if (totalFeedback === 0) {\n      return 0;\n    }\n    return Math.round(((goodOption + neutralOption) / totalFeedback) * 100);\n  };\n\n  const handleFeedback = e => {\n    e.preventDefault();\n    const label = e.target.name;\n    switch (label) {\n      case 'good':\n        setGoodOption(state => state + 1);\n        break;\n      case 'neutral':\n        setNeutralOption(state => state + 1);\n        break;\n      case 'bad':\n        setBadOption(state => state + 1);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const arrOptions = ['good', 'neutral', 'bad'];\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={arrOptions}\n          onLeaveFeedback={handleFeedback}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Statistics\n            good={goodOption}\n            neutral={neutralOption}\n            bad={badOption}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          ></Statistics>\n        )}\n      </Section>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}
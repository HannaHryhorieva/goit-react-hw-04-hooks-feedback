{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","shortid","generate","Section","title","children","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","totalFeedback","Math","round","handleFeedback","e","preventDefault","label","currentTarget","setState","arrOptions","Object","keys","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySACe,SAASA,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,qBAAKC,UAAU,aAAf,SACE,+BACE,yCAAYL,KACZ,4CAAeC,KACf,wCAAWC,KACX,0CAAaC,KACb,uDAA0BC,EAA1B,Y,oBCZO,SAASE,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACE,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAEEC,KAAK,SACLN,UAAU,gBACVO,KAAMF,EACNG,QAASL,EALX,SAOGE,GANII,IAAQC,iBCPvB,IAUeC,EAVC,SAAC,GAAD,QAAGC,aAAH,MAAW,GAAX,EAAeC,EAAf,EAAeA,SAAf,OACd,sBAAKb,UAAU,YAAf,UACE,6BAAKY,IACJC,MCCUC,EAJM,SAAC,GAAD,QAAGC,eAAH,MAAa,GAAb,SAAsB,4BAAIA,KCMzCC,E,4MACJC,MAAQ,CACNtB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPqB,mBAAqB,WACnB,OAAO,EAAKD,MAAMtB,KAAO,EAAKsB,MAAMrB,QAAU,EAAKqB,MAAMpB,K,EAE3DsB,gCAAkC,WAChC,IAAMC,EAAgB,EAAKF,qBAC3B,OAAsB,IAAlBE,EACK,EAEFC,KAAKC,OACR,EAAKL,MAAMtB,KAAO,EAAKsB,MAAMrB,SAAWwB,EAAiB,M,EAI/DG,eAAiB,SAAAC,GACfA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,cAAcpB,KAC9B,EAAKqB,SAAL,eAAiBF,EAAQ,EAAKT,MAAMS,GAAS,K,4CAE/C,WACE,IAAMG,EAAaC,OAAOC,KAAKC,KAAKf,OAEpC,OACE,gCACE,cAAC,EAAD,CAASL,MAAM,wBAAf,SACE,cAACX,EAAD,CACEC,QAAS2B,EACT1B,gBAAiB6B,KAAKT,mBAG1B,cAAC,EAAD,CAASX,MAAM,aAAf,SACiC,IAA9BoB,KAAKd,qBACJ,cAAC,EAAD,CAAcH,QAAQ,sBAEtB,cAACrB,EAAD,CACEC,KAAMqC,KAAKf,MAAMtB,KACjBC,QAASoC,KAAKf,MAAMrB,QACpBC,IAAKmC,KAAKf,MAAMpB,IAChBC,MAAOkC,KAAKd,qBACZnB,mBAAoBiC,KAAKb,6C,GA7CrBc,aAsDHjB,ICxDfkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a8989d0f.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <div className=\"Statistics\">\n      <ul>\n        <li>good : {good}</li>\n        <li>neutral : {neutral}</li>\n        <li>bad : {bad}</li>\n        <li>total : {total}</li>\n        <li>positivePercentage : {positivePercentage}%</li>\n      </ul>\n    </div>\n  );\n}\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n","import PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div>\n      {options.map(option => (\n        <button\n          key={shortid.generate()}\n          type=\"button\"\n          className=\"TodoList__btn\"\n          name={option}\n          onClick={onLeaveFeedback}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n}\nFeedbackOptions.propTypes = {\n  options: PropTypes.array,\n  onLeaveFeedback: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nconst Section = ({ title = '', children }) => (\n  <div className=\"Container\">\n    <h3>{title}</h3>\n    {children}\n  </div>\n);\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.element,\n};\nexport default Section;\n","import PropTypes from 'prop-types';\nconst Notification = ({ message = '' }) => <p>{message}</p>;\nNotification.propTypes = {\n  message: PropTypes.string,\n};\nexport default Notification;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const totalFeedback = this.countTotalFeedback();\n    if (totalFeedback === 0) {\n      return 0;\n    }\n    return Math.round(\n      ((this.state.good + this.state.neutral) / totalFeedback) * 100,\n    );\n  };\n\n  handleFeedback = e => {\n    e.preventDefault();\n    const label = e.currentTarget.name;\n    this.setState({ [label]: this.state[label] + 1 });\n  };\n  render() {\n    const arrOptions = Object.keys(this.state);\n\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={arrOptions}\n            onLeaveFeedback={this.handleFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            ></Statistics>\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}